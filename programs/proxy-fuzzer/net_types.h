#ifndef __NET_TYPES_H_
#define __NET_TYPES_H_

#include <sys/types.h>

#define TAP_FRAME_OFFSET 4
#define size_of_attr(Struct, Attr) sizeof(((Struct *)0)->Attr)

struct eth_hdr {
  u_int8_t dest_mac[6];
  u_int8_t src_mac[6];
  u_int8_t eth_type[2];
};

const int DEST_MAC_OFFSET = TAP_FRAME_OFFSET;
const int SRC_MAC_OFFSET = DEST_MAC_OFFSET + size_of_attr(struct eth_hdr, dest_mac);
const int ETH_TYPE_OFFSET = SRC_MAC_OFFSET + size_of_attr(struct eth_hdr, src_mac);

struct __attribute__((__packed__)) vers_ihl_b {
  unsigned int version : 4;
  unsigned int ihl : 4;
};

union ver_ihl {
  struct vers_ihl_b ver_ihl_b;
  u_int8_t ver_ihl_B;
};

struct __attribute__((__packed__)) dscp_ecn_b {
  unsigned int dscp : 6;
  unsigned int ecn : 2;
};

union dscp_ecn {
  struct dscp_ecn_b dscp_ecn_b;
  u_int8_t dscp_ecn_B;
};

struct __attribute__((__packed__)) flags_offset_b {
  unsigned int flags : 3;
  unsigned int fragment_offset : 13;
};

union flags_offset {
  struct flags_offset_b flags_offset_b;
  u_int8_t flags_offset_B[2];
};

struct ip_hdr {
  union ver_ihl ver_ihl;
  union dscp_ecn dscp_ecn;
  u_int8_t total_len[2];
  u_int8_t identification[2];
  union flags_offset flags_offset;
  u_int8_t ttl;
  u_int8_t protocol;
  u_int8_t hdr_checksum[2];
  u_int8_t src_ip_addr[4];
  u_int8_t dest_ip_addr[4];
};

const int IP_HDR_OFFSET = ETH_TYPE_OFFSET + size_of_attr(struct eth_hdr, eth_type);
const int VER_IHL_OFFSET = IP_HDR_OFFSET;
const int DSCP_ECN_OFFSET = VER_IHL_OFFSET + size_of_attr(struct ip_hdr, ver_ihl);
const int TOTAL_LEN_OFFSET = DSCP_ECN_OFFSET + size_of_attr(struct ip_hdr, dscp_ecn);
const int IDENTIFICATION_OFFSET = TOTAL_LEN_OFFSET + size_of_attr(struct ip_hdr, total_len);
const int FLAGS_FRAG_OFFSET_OFFSET = IDENTIFICATION_OFFSET + size_of_attr(struct ip_hdr, identification);
const int TTL_OFFSET = FLAGS_FRAG_OFFSET_OFFSET + size_of_attr(struct ip_hdr, flags_offset);
const int PROTOCOL_OFFSET = TTL_OFFSET + size_of_attr(struct ip_hdr, ttl);
const int HDR_CHECKSUM_OFFSET = PROTOCOL_OFFSET + size_of_attr(struct ip_hdr, protocol);
const int SRC_IP_ADDR_OFFSET = HDR_CHECKSUM_OFFSET + size_of_attr(struct ip_hdr, hdr_checksum);
const int DEST_IP_ADDR_OFFSET = SRC_IP_ADDR_OFFSET + size_of_attr(struct ip_hdr, src_ip_addr);

struct udp_hdr {
  u_int8_t src_port[2];
  u_int8_t dest_port[2];
  u_int8_t udp_len[2];
  u_int8_t udp_checksum[2];
};

const int UDP_HDR_OFFSET = DEST_IP_ADDR_OFFSET + size_of_attr(struct ip_hdr, dest_ip_addr);
const int SRC_PORT_OFFSET = UDP_HDR_OFFSET;
const int DEST_PORT_OFFSET = SRC_PORT_OFFSET + size_of_attr(struct udp_hdr, src_port);
const int UDP_LEN_OFFSET = DEST_PORT_OFFSET + size_of_attr(struct udp_hdr, dest_port);
const int UDP_CHECKSUM_OFFSET = UDP_LEN_OFFSET + size_of_attr(struct udp_hdr, udp_len);

struct __attribute__((__packed__)) smpt {
  unsigned int solicited_event : 1; // event should be generated by responder
  unsigned int mig_reg : 1;         // communicates 'migration state'
  unsigned int
      pad_count : 2; // how many extra bytes to align payload to 4-byte boundary
  unsigned int tver : 4; // transport header version
};

union s_m_p_t {
  struct smpt smpt;
  u_int8_t sol_ev_mig_reg_pad_tver;
};

struct __attribute__((__packed__)) ackrq_res {
  unsigned int ack_rq : 1;
  unsigned int reserved : 7;
};

union a_r {
  struct ackrq_res ackrq_res;
  u_int8_t ack_req_res;
};

struct ib_bth {
  u_int8_t
      opcode; // indicates iba packet type, also extension headers to follow
  union s_m_p_t s_m_p_t;
  u_int8_t p_key_1;
  u_int8_t p_key_2;
  u_int8_t fr_br_reserved;
  u_int8_t dest_qp_1;
  u_int8_t dest_qp_2;
  u_int8_t dest_qp_3;
  union a_r a_r;
  u_int8_t psn_1;
  u_int8_t psn_2;
  u_int8_t psn_3;
};

const int IB_BTH_OFFSET = UDP_CHECKSUM_OFFSET + size_of_attr(struct udp_hdr, udp_checksum);
const int IB_OPCODE_OFFSET = IB_BTH_OFFSET;
const int IB_SMPT_OFFSET = IB_OPCODE_OFFSET + size_of_attr(struct ib_bth, opcode);
const int IB_PKEY_OFFSET_B1 = IB_SMPT_OFFSET + size_of_attr(struct ib_bth, s_m_p_t);
const int IB_PKEY_OFFSET_B2 = IB_PKEY_OFFSET_B1 + size_of_attr(struct ib_bth, p_key_1);
const int IB_FR_BR_RESERVED_OFFSET = IB_PKEY_OFFSET_B2 + size_of_attr(struct ib_bth, p_key_2);
const int IB_DEST_QP_B1_OFFSET = IB_FR_BR_RESERVED_OFFSET + size_of_attr(struct ib_bth, fr_br_reserved);
const int IB_DEST_QP_B2_OFFSET = IB_DEST_QP_B1_OFFSET + size_of_attr(struct ib_bth, dest_qp_1);
const int IB_DEST_QP_B3_OFFSET = IB_DEST_QP_B2_OFFSET + size_of_attr(struct ib_bth, dest_qp_2);
const int IB_AR_OFFSET = IB_DEST_QP_B3_OFFSET + size_of_attr(struct ib_bth, dest_qp_3);
const int IB_PSN_B1_OFFSET = IB_AR_OFFSET + size_of_attr(struct ib_bth, a_r);
const int IB_PSN_B2_OFFSET = IB_PSN_B1_OFFSET + size_of_attr(struct ib_bth, psn_1);
const int IB_PSN_B3_OFFSET = IB_PSN_B2_OFFSET + size_of_attr(struct ib_bth, psn_2);
const int IB_PSEUD_PAYLOAD_OFFSET = IB_PSN_B3_OFFSET + size_of_attr(struct ib_bth, psn_3);

#endif // __NET_TYPES_H_
