package main

import (
	"bytes"
	"encoding/binary"
	"fmt"
	"math/rand"
	"net"
	"os"
	"time"
)

/**
 *   BTH 12 bytes long
 **/

type BaseTransportHeader struct {
	/*
		   opcode indicates IBA packet type,
			 also specifies which extension headers follow the base
			 transport header
	*/
	opCode uint8

	/*
		 - bit 1: solicited event (SE) indicates that an event should be
		   generated by the responder
		 - bit 2: MigReq is used to communicate migration state
		 - bits 3-4: PadCnt indicates how many extra bytes are added to
				payload to align to a 4 byte boundary.
		 - bits 5-8: Transport Header Version (TVer) version of the IBA
				transport heades.
	*/
	SE_M_PC_TVer uint8

	/*
		 Partition Key: this field indicates which logical partition
			is associated with the packet.
	*/
	P_KEY uint16

	/*
	 Transmitted as 0s, ignored on receive
	  not included in iCRC
	*/
	Fr_Br_reserved uint8

	/*
		Destination QP (DestQP): indicates Work Queue Pair Number at dest.
			field is 24 bits
	*/
	DestQP_1 uint8
	DestQP_2 uint8
	DestQP_3 uint8

	/*
		-bit 1: Acknowledge request, used to indicate that an acknowledge
			(for this pkt) should be scheduled by the responder
		-bits 2-8: reserved, transmitted as 0s, *included* in iCRC
	*/
	ack_req_res uint8

	/*
		packet sequence number is used to detect a missing or duplicate
		packet, field is 24 bits.
	*/
	PSN_1 uint16
	PSN_2 uint8
}

/**
  *	 RoCEv2 Packet format
	*   ____________________________________________________________________
  *  |                          |                  |                      |
	*	 |      Eth. L2. Hdr        |  IP Hdr (Proto#) |      UDP HDR         |
	*	 |        +ethertype        |    proto# : UDP  |       port#          |
	*	 |__________________________|__________________|______________________|
  *
	*   ____________________________________________________________________________
  *  |                          |                  |                      |       |
	*	 |        IB BTH+           |    IB Payload    |       Invariant      |  FCS  |
	*	 |      (basetransp hdr)    |                  |         CRC          |       |
	*	 |__________________________|__________________|______________________|_______|
	*           12 Bytes
  *
	*
  **/

type IBPacket struct {
	BTH     BaseTransportHeader
	Payload [200]byte
	iCRC    uint32
	FCS     uint8
}

func main() {
	/* randomly mutate this data */
	bth := BaseTransportHeader{
		opCode:         0x81,
		SE_M_PC_TVer:   0x00,
		P_KEY:          0xffff,
		Fr_Br_reserved: 0x40,
		DestQP_1:       0x00,
		DestQP_2:       0x00,
		DestQP_3:       0x11,
		ack_req_res:    0x0,
		PSN_1:          0x0,
		PSN_2:          0x0,
	}
	data := IBPacket{
		BTH:     bth,
		Payload: [200]byte{},
		iCRC:    123456,
		FCS:     255,
	}

	udpAddr, err := net.ResolveUDPAddr("udp", "127.0.0.1:8003")
	if err != nil {
		fmt.Print(err)
		os.Exit(1)
	}
	conn, err := net.DialUDP("udp", nil, udpAddr)
	if err != nil {
		fmt.Print(err)
		os.Exit(1)
	}

	var buf bytes.Buffer
	err = binary.Write(&buf, binary.BigEndian, data)

	if err != nil {
		fmt.Println("binary write failed")
		fmt.Print(err)
		os.Exit(1)
	}

	packet_bytes := buf.Bytes()
	conn.Write(packet_bytes)
	var cp_pkt = make([]byte, len(packet_bytes))
	for {
		copy(cp_pkt, packet_bytes)
		for i := 0; i < 25; i++ {
			conn.Write(cp_pkt)
			time.Sleep(100 * time.Millisecond)

			rseed := rand.Intn(12)
			flip_bits(&(cp_pkt), rseed, 4, uint8(rand.Intn(4)))
			//flip_bits(&(cp_pkt), 7, 4, uint8(rand.Intn(4)))
		}
		for i := 0; i < 10; i++ {
			conn.Write(cp_pkt)
			time.Sleep(100 * time.Millisecond)

			rseed := rand.Intn(12)
			flip_bytewise(&(cp_pkt), rseed)
		}

	}

}
