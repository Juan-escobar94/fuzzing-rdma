#+TODO: TODO IN-PROGRESS WAITING DONE


* List of things to get done, to get back workin' on it:
** DONE install emacs and lang server for c: clangd (came with clang package which also installed llvm).
** DONE install rdma core libraries
** DONE put header file definitions inside */usr/local/include*
** TODO install VM Hypervisor
*** TODO KVM/QEMU/libvirt => interface with host (files)
*** DONE Oracle VM if the above does not work like expected.
** DONE install vagrant
*** DONE install vbguest additions: =vagrant install plugin vagrant-vbguest=
** DONE install respective vagrant box
** DONE install debian/ubuntu packages in ubuntu box:
*** DONE =install= libosmvendor4 libosmcomp4 lisopensm8
*** DONE =sudo apt install= linux-modules-extra-5.4.0-56-generic => SHOULD MATCH KERNEL VERSION
** DONE recover progress
*** DONE clone git repo (rdma_related_programs)
*** DONE copy backup files from Backup drive



* Writing Related
** DONE install zotero and login
** Remember to send Maksym every 2 weeks a draft.
** IN-PROGRESS First Draft
SCHEDULED: <2020-02-03 Mo>
*** IN-PROGRESS write an outline for the draft


* Look into (interesting links):
** ib_uverbs kernel module (creates uverbs* char devices) https://android.googlesource.com/kernel/common/+/bcmdhd-3.10/Documentation/infiniband/user_verbs.txt
** libibverbs: https://github.com/linux-rdma/rdma-core/blob/master/Documentation/libibverbs.md
*** refers to InfiniBand Architecture Specification vol1, especially chapter 11
** SoftRoCE mellanox blog: https://blog.mellanox.com/2015/06/ethernet-just-got-big-performance-boost-with-release-soft-roce/
** RoCE v1 vs v2

* more in-depth:
** TODO figure out a better optimized kernel configuration (that probably does not take > 30 min)
*** right now the one compiling install touch screen modules, toshiba stuff... wtf. => really just need the infiniband stuff + minimum working config.
** TODO start playing with fuzzers:
*** TODO Maksym suggested a grammar based fuzzer
*** DONE try out AFL
*** IN-PROGRESS try out syzkaller
*** IN-PROGRESS re-read papers and find out their fuzzing approach.
** TODO recover somehow ioctl calls from rdma programs probably LD_PRELOAD trick?
** TODO figure out how to work with the options compiled into the kernel.
*** [ ] KASAN
*** [ ] Code coverage (KCOV)
** an interesting question is how to approach fuzzing code delivery. Ideas : SSH | RPC | IPC | CONFIG FILES?
*** restarting vm everytime it crashes is not really acceptable
*** maybe reaload snapshots on crash? will this be faster?
*** divert dmesg outputs to serial port and read them from outside the vm
